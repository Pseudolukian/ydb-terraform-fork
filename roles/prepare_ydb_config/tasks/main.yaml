---

#==============Working with static group================#
- name: Identify the static node root disk
  ansible.builtin.shell: 
    cmd: df / | tail -1 | awk '{print $1}' | xargs -n 1 basename | sed 's/[0-9]*//g'
  register: static_node_root_disk  
  when: inventory_hostname == groups['ydb-static-node'][0]  

- name: Set static root disk to global
  set_fact:
    global_static_root_disk: "{{ static_node_root_disk.stdout_lines }}"
  when: inventory_hostname == groups['ydb-static-node'][0]    

- name: List all static non-mounted disks excluding the root disk
  ansible.builtin.shell: 
    cmd: lsblk -nlpo NAME,TYPE,MOUNTPOINT | grep -v "part\|loop" | awk -v rootdisk="{{ static_node_root_disk.stdout }}" '$2=="disk" && $3=="" && $1 !~ rootdisk {print $1}'
  register: static_non_mounted_disks 
  when: inventory_hostname == groups['ydb-static-node'][0]

- name: Set static node non-mounted disks 
  set_fact:
    global_static_non_mounted_disks: "{{ static_non_mounted_disks.stdout_lines }}"
  when: inventory_hostname == groups['ydb-static-node'][0]   

- name: Print static non-mounted disks
  ansible.builtin.debug:
    msg: "Static non-mounted disks are: {{ global_static_non_mounted_disks }}"  
  when: inventory_hostname == groups['ydb-static-node'][0] 


#==============Working with dynamic group================#
- name: Identify the dynamic node root disk
  ansible.builtin.shell: 
    cmd: df / | tail -1 | awk '{print $1}' | xargs -n 1 basename | sed 's/[0-9]*//g'
  register: dynamic_node_root_disk  
  when: inventory_hostname == groups['ydb-dyn-node'][0]  

- name: Set dynamic root disk as global
  set_fact:
    global_dynamic_root_disk: "{{ dynamic_node_root_disk.stdout_lines }}"
  when: inventory_hostname == groups['ydb-dyn-node'][0]   

- name: List all non-mounted disks excluding the root disk
  ansible.builtin.shell: 
    cmd: lsblk -nlpo NAME,TYPE,MOUNTPOINT | grep -v "part\|loop" | awk -v rootdisk="{{ dynamic_node_root_disk.stdout }}" '$2=="disk" && $3=="" && $1 !~ rootdisk {print $1}'
  register: dyn_non_mounted_disks 
  when: inventory_hostname == groups['ydb-dyn-node'][0]

- name: Set dynamic node non-mounted disks 
  set_fact:
    global_dyn_non_mounted_disks: "{{ dyn_non_mounted_disks.stdout_lines }}"
  when: inventory_hostname == groups['ydb-dyn-node'][0]   

- name: Print dynamic non-mounted disks
  ansible.builtin.debug:
    msg: "Dynamic non-mounted disks are: {{ global_dyn_non_mounted_disks }}"  
  when: inventory_hostname == groups['ydb-dyn-node'][0] 

#================Dump data to files ====================#
- name: Generate cost configs section
  template:
    src: "{{ config_src }}host_configs.j2"
    dest: "{{ config_tmp }}host_configs.j2"
  delegate_to: localhost
  become: no
  vars:  
    global_static_non_mounted_disks: "{{ hostvars[groups['ydb-static-node'][0]]['global_static_non_mounted_disks'] }}"
    global_dyn_non_mounted_disks: "{{ hostvars[groups['ydb-dyn-node'][0]]['global_dyn_non_mounted_disks'] }}"

- name: Generate hosts section
  template:
    src: "{{ config_src }}hosts.j2"
    dest: "{{ config_tmp }}hosts.j2"
  delegate_to: localhost
  become: no    

- name: Generate domains config
  template:
    src: "{{ config_src }}domains_config.j2"
    dest: "{{ config_tmp }}domains_config.j2"
  delegate_to: localhost
  become: no    

- name: Generate actor system
  ansible.builtin.copy:
    src: "{{ config_src }}actor_system_config.j2"
    dest: "{{ config_tmp }}actor_system_config.j2"
  delegate_to: localhost
  become: no      

- name: Generate blob storage config
  template:
    src: "{{ config_src }}blob_storage_config.j2"
    dest: "{{ config_tmp }}blob_storage_config.j2"
  delegate_to: localhost
  become: no     
  vars:  
    global_static_non_mounted_disks: "{{ hostvars[groups['ydb-static-node'][0]]['global_static_non_mounted_disks'] }}"

- name: Generate channel profile config
  ansible.builtin.copy:
    src: "{{ config_src }}channel_profile_config.j2"
    dest: "{{ config_tmp }}channel_profile_config.j2"
  delegate_to: localhost
  become: no  

- name: Generate table service config
  ansible.builtin.copy:
    src: "{{ config_src }}table_service_config.j2"
    dest: "{{ config_tmp }}table_service_config.j2"
  delegate_to: localhost
  become: no    

- name: Generate chared cached config
  ansible.builtin.copy:
    src: "{{ config_src }}shared_cached_config.j2"
    dest: "{{ config_tmp }}shared_cached_config.j2"
  delegate_to: localhost
  become: no      

- name: Generate grpc config
  ansible.builtin.copy:
    src: "{{ config_src }}grpc_config.j2"
    dest: "{{ config_tmp }}grpc_config.j2"
  delegate_to: localhost
  become: no  

- name: Generate monitoring config
  ansible.builtin.copy:
    src: "{{ config_src }}monitoring_config.j2"
    dest: "{{ config_tmp }}monitoring_config.j2"
  delegate_to: localhost
  become: no    

#==========Generate final config ======================#

- name: Initialize an empty string for file content
  set_fact:
    combined_content: ""
    is_first_iteration: true

- name: Slurp content of each file and append
  ansible.builtin.slurp:
    src: "{{ item }}"
  register: slurped_content
  loop: "{{ list_of_files }}"
  delegate_to: localhost
  become: no
  loop_control:
    label: "{{ item }}"

- name: Combine file content
  set_fact:
    combined_content: "{{ combined_content + ('\n\n' if not is_first_iteration else '') + (item.content | b64decode | trim) }}"
    is_first_iteration: false
  loop: "{{ slurped_content.results }}"

- name: Copy the combined content to the target file
  ansible.builtin.copy:
    dest: "{{ final_config_template }}"
    content: "{{ combined_content }}"
  delegate_to: localhost
  become: no

- name: Upload config to all VM
  template: 
    src: "{{ final_config_template }}"
    dest: "{{ cfg_path }}/config.yaml"